#!/usr/bin/python2.6
#
# Copyright (c) 2011 by Delphix.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# This script verifies that a set of bug IDs correspond to bugs that are part
# of a pending review request.  To use it, run:
#
#	check-bugs <bugid> ...
#
# For example:
#
#	check-bugs 9378 10013
#
# The script will check all reviews in the 'pending' state and process the
# "bugs" field.  If there are any bugs specified in the arguments that are not
# accounted for by pending reviews, an error message is printed and a non-zero
# exit status is returned.
#
# Note that this doesn't check that the set of bugs exactly matches a complete
# set of a single review.  This means that it will allow bugs in the review
# that are not addressed by comments, as well as allowing a single push to be
# covered by multiple reviews.  This is generally poor form (the set of diffs
# reviewed as a unit should be pushed as a unit), but there are times when it
# is useful to break up a set of changes into smaller reviews.
#

import rblib
import sys

seen = {}

server = rblib.ReviewBoardServer()
reviews = server.get_pending_reviews()
for r in reviews:
    for bugid in r['bugs_closed']:
        seen[bugid] = r['id']

exitstatus = 0
for i in xrange(1, len(sys.argv)):
    bugid = sys.argv[i]
    if not bugid in seen:
        print "ERROR: bug %s is not covered by a pending review" % (bugid)
        exitstatus = 1

sys.exit(exitstatus)
